/*
   ----------------------------------------------------------------------------
   | Package:     mg_go                                                       |
   | OS:          Unix                                                        |
   | Description: An Interface to InterSystems Cache/IRIS and YottaDB         |
   | Author:      Chris Munt cmunt@mgateway.com                               |
   |                         chris.e.munt@gmail.com                           |
   | Copyright (c) 2017-2020 M/Gateway Developments Ltd,                      |
   | Surrey UK.                                                               |
   | All rights reserved.                                                     |
   |                                                                          |
   | http://www.mgateway.com                                                  |
   |                                                                          |
   | Licensed under the Apache License, Version 2.0 (the "License"); you may  |
   | not use this file except in compliance with the License.                 |
   | You may obtain a copy of the License at                                  |
   |                                                                          |
   | http://www.apache.org/licenses/LICENSE-2.0                               |
   |                                                                          |
   | Unless required by applicable law or agreed to in writing, software      |
   | distributed under the License is distributed on an "AS IS" BASIS,        |
   | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |
   | See the License for the specific language governing permissions and      |
   | limitations under the License.                                           |      
   |                                                                          |
   ----------------------------------------------------------------------------
*/

/*
   Development Diary (in brief):

Version 1.0.1 3 July 2019:
   First release.

Version 1.1.2 8 January 2020:
   Network based connectivity option.

*/

package mg_go

// #cgo LDFLAGS: -ldl 
// #include <stdio.h> 
// #include <stdlib.h> 
// #include <dlfcn.h>
// int c_dbx_init(void *f)
// {
//    return ((int (*)()) f)();
// }
// int c_dbx_version(void *f, int index, void *output, int output_len)
// {
//    return ((int (*)(int , char *, int)) f)(index, (char *) output, output_len);
// }
// int c_dbx_sleep(void *f, int period_ms)
// {
//    return ((int (*)(int)) f)(period_ms);
// }
// int c_dbx_generic(void *f, void *inputstr, void *outputstr)
// {
//    return ((int (*)(unsigned char *, unsigned char *)) f)((unsigned char *) inputstr, (unsigned char *) outputstr);
// }
import "C"
import (
	"fmt"
	"unsafe"
    "strconv"
)

const DBX_VERSION_MAJOR    int = 1
const DBX_VERSION_MINOR    int = 1
const DBX_VERSION_BUILD    int = 2

const DBX_DSORT_INVALID    byte = 0
const DBX_DSORT_DATA       byte = 1
const DBX_DSORT_SUBSCRIPT  byte = 2
const DBX_DSORT_GLOBAL     byte = 3
const DBX_DSORT_EOD        byte = 9
const DBX_DSORT_STATUS     byte = 10
const DBX_DSORT_ERROR      byte = 11

const DBX_DTYPE_NONE       byte = 0
const DBX_DTYPE_STR        byte = 1
const DBX_DTYPE_STR8       byte = 2
const DBX_DTYPE_STR16      byte = 3
const DBX_DTYPE_INT        byte = 4
const DBX_DTYPE_INT64      byte = 5
const DBX_DTYPE_DOUBLE     byte = 6
const DBX_DTYPE_OREF       byte = 7
const DBX_DTYPE_NULL       byte = 10

const DBX_CMND_OPEN        byte = 1
const DBX_CMND_CLOSE       byte = 2
const DBX_CMND_NSGET       byte = 3
const DBX_CMND_NSSET       byte = 4

const DBX_CMND_GSET        byte = 11
const DBX_CMND_GGET        byte = 12
const DBX_CMND_GNEXT       byte = 13
const DBX_CMND_GPREVIOUS   byte = 14
const DBX_CMND_GDELETE     byte = 15
const DBX_CMND_GDEFINED    byte = 16
const DBX_CMND_GINCREMENT  byte = 17

const DBX_CMND_FUNCTION    byte = 31

const DBX_CMND_CCMETH      byte = 41
const DBX_CMND_CGETP       byte = 42
const DBX_CMND_CSETP       byte = 43
const DBX_CMND_CMETH       byte = 44


const DBX_INPUT_BUFFER_SIZE   int = 32768
const DBX_OUTPUT_BUFFER_SIZE  int = 32768

// Connectivity to the database API
type Database struct {
   Type string
   APImodule string
   Path string
   Host string
   TCPPort int
   Server string
   ServerSoftware string
   Username string
   Password string
   Namespace string
   Debug string
   EnvVars string
   InputBufferSize int
   OutputBufferSize int
   index int
   inputbuffer []byte
   outputbuffer []byte
   Cinputbuffer unsafe.Pointer
   Coutputbuffer unsafe.Pointer
}

// Global
type Global struct {
   db *Database
   Name string
}

// InterSystems DB Class
type Class struct {
   db *Database
   Name string
   oref int
}

// Generic result object 
type Result struct {
   Data interface{}
   DataType byte
   OK bool
   ErrorCode int
   ErrorMessage string
}


var pf_init          unsafe.Pointer = nil
var pf_version       unsafe.Pointer = nil
var pf_open          unsafe.Pointer = nil
var pf_close         unsafe.Pointer = nil
var pf_set           unsafe.Pointer = nil
var pf_get           unsafe.Pointer = nil
var pf_next          unsafe.Pointer = nil
var pf_previous      unsafe.Pointer = nil
var pf_nextnode      unsafe.Pointer = nil
var pf_delete        unsafe.Pointer = nil
var pf_defined       unsafe.Pointer = nil
var pf_merge         unsafe.Pointer = nil
var pf_increment     unsafe.Pointer = nil
var pf_lock          unsafe.Pointer = nil
var pf_unlock        unsafe.Pointer = nil
var pf_function      unsafe.Pointer = nil
var pf_classmethod   unsafe.Pointer = nil
var pf_method        unsafe.Pointer = nil
var pf_getproperty   unsafe.Pointer = nil
var pf_setproperty   unsafe.Pointer = nil
var pf_closeinstance unsafe.Pointer = nil
var pf_getnamespace  unsafe.Pointer = nil
var pf_setnamespace  unsafe.Pointer = nil
var pf_sleep         unsafe.Pointer = nil
var pf_benchmark     unsafe.Pointer = nil


// Create a new database object
func New(Type string) Database {
   db := new(Database)

   db.Type = Type
   db.index = 0
   db.Path = ""
   db.Host = ""
   db.Server = ""
   db.ServerSoftware = ""
   db.Username = ""
   db.Password = ""
   db.Namespace = ""
   db.EnvVars = ""
   db.TCPPort = 0;

   db.InputBufferSize = DBX_INPUT_BUFFER_SIZE
   db.OutputBufferSize = DBX_OUTPUT_BUFFER_SIZE

   db.Cinputbuffer = C.malloc(C.size_t(db.InputBufferSize))
   db.Coutputbuffer = C.malloc(C.ulong(db.OutputBufferSize))

   db.inputbuffer = (*[1 << 30]byte)(unsafe.Pointer(db.Cinputbuffer))[:]
   db.outputbuffer = (*[1 << 30]byte)(unsafe.Pointer(db.Coutputbuffer))[:]

   return *db
}


// Return the version of this module and any known version information about the database
func (db *Database) Version() string {
   if (pf_version == nil) {
      load_mg_dba(db.APImodule)
      db.index = 0
   }
   mod_version := Version();
   api_version := make([]byte, 256)
   C.c_dbx_version(pf_version, C.int(db.index), unsafe.Pointer(&api_version[0]), 256)

   version := fmt.Sprintf("%s; %s", mod_version, api_version)

   return string(version)
}


// Open a connection to the database
func (db *Database) Open() Result {

   if (pf_version == nil) {
      load_mg_dba(db.APImodule)
      db.index = 0
   }

   buffer_len := 0;

   block_add_size(db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   block_add_string(db.inputbuffer[:], &buffer_len, db.Type, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Path, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Host, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, strconv.Itoa(db.TCPPort), 0, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Username, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Password, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Namespace, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Debug, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.EnvVars, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.Server, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, db.ServerSoftware, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(db.inputbuffer[:], buffer_len, DBX_CMND_OPEN)

   C.c_dbx_generic(pf_open, unsafe.Pointer(db.Cinputbuffer), nil)

   res := get_result(db.inputbuffer)

   return res
}


// Close a connection to the database
func (db *Database) Close() Result {

   buffer_len := 0;

   block_add_size(db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(db.inputbuffer[:], buffer_len, DBX_CMND_CLOSE)

   C.c_dbx_generic(pf_close, unsafe.Pointer(db.Cinputbuffer), nil)

   res := get_result(db.inputbuffer)

   return res
}


// Get current namespace
func (db *Database) GetNamespace() Result {

   buffer_len := 0;

   block_add_size(db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(db.inputbuffer[:], buffer_len, DBX_CMND_NSGET)

   C.c_dbx_generic(pf_getnamespace, unsafe.Pointer(db.Cinputbuffer), nil)

   res := get_result(db.inputbuffer)

   return res
}


// Set current namespace
func (db *Database) SetNamespace(Namespace string) Result {

   buffer_len := 0;

   block_add_size(db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   block_add_string(db.inputbuffer[:], &buffer_len, Namespace, 0, DBX_DSORT_DATA, DBX_DTYPE_STR)
   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(db.inputbuffer[:], buffer_len, DBX_CMND_NSSET)

   C.c_dbx_generic(pf_setnamespace, unsafe.Pointer(db.Cinputbuffer), nil)

   res := get_result(db.inputbuffer)

   return res
}


// Create a new Global node object
func (db *Database) Global(Name string) Global {

   g := new(Global)
   g.db = db
   if (Name[0] != '^') {
      g.Name = "^" + Name
   } else {
      g.Name = Name
   }
   //g.Key = make([]interface{}, MaxKey)
   //g.MaxKey = MaxKey

   return *g;
}


// Initialize Global Data Block
func (g *Global) Reference(args ... interface{}) int {
   buffer_len := 0;

   block_add_size(g.db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(g.db.inputbuffer[:], &buffer_len, g.db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(g.db.inputbuffer[:], &buffer_len, g.db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   block_add_string(g.db.inputbuffer[:], &buffer_len, g.Name, 0, DBX_DSORT_GLOBAL, DBX_DTYPE_STR)
   return buffer_len
}


// Set a Global data node
func (g *Global) Set(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GSET)

   C.c_dbx_generic(pf_set, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   return res
}


// Get a Global data node
func (g *Global) Get(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GGET)

   C.c_dbx_generic(pf_get, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   return res
}

// Get the next key element for a Global ($Order) 
func (g *Global) Next(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GNEXT)

   C.c_dbx_generic(pf_next, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   if (res.Data == "") {
      res.OK = false
   } else {
      res.OK = true
   }

   return res
}


// Get the previous key element for a Global (Reverse $Order)
func (g *Global) Previous(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GPREVIOUS)

   C.c_dbx_generic(pf_previous, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   if (res.Data == "") {
      res.OK = false
   } else {
      res.OK = true
   }

   return res
}


// Delete a Global reference (and all descendants)
func (g *Global) Delete(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GDELETE)

   C.c_dbx_generic(pf_delete, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   return res
}


// Test that a Global reference exists ($Data)
func (g *Global) Defined(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GDEFINED)

   C.c_dbx_generic(pf_defined, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   return res
}


// Increment a global node
func (g *Global) Increment(args ... interface{}) Result {
   buffer_len := g.Reference()

   for _, x := range args {
      block_add_item(g.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(g.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(g.db.inputbuffer[:], buffer_len, DBX_CMND_GINCREMENT)

   C.c_dbx_generic(pf_increment, unsafe.Pointer(g.db.Cinputbuffer), nil)

   res := get_result(g.db.inputbuffer)

   return res
}


// Invoke a database function
func (db *Database) Function(args ... interface{}) Result {
   buffer_len := 0;

   block_add_size(db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(db.inputbuffer[:], &buffer_len, db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   for _, x := range args {
      block_add_item(db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }

   block_add_string(db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(db.inputbuffer[:], buffer_len, DBX_CMND_FUNCTION)

   C.c_dbx_generic(pf_function, unsafe.Pointer(db.Cinputbuffer), nil)

   res := get_result(db.inputbuffer)

   return res
}


// Create a new database class object
func (db *Database) Class(Name string) Class {

   c := new(Class)
   c.db = db
   c.Name = Name
   c.oref = -1

   return *c;
}


// Initialize Global Data Block
func (c *Class) Reference(args ... interface{}) int {
   buffer_len := 0

   block_add_size(c.db.inputbuffer[:], &buffer_len, buffer_len, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(c.db.inputbuffer[:], &buffer_len, c.db.OutputBufferSize, DBX_DSORT_DATA, DBX_DTYPE_INT)
   block_add_size(c.db.inputbuffer[:], &buffer_len, c.db.index, DBX_DSORT_DATA, DBX_DTYPE_INT)

   return buffer_len
}


// Invoke a class method
func (c *Class) ClassMethod(method string, args ... interface{}) Result {
   buffer_len := c.Reference()

   block_add_item(c.db.inputbuffer[:], &buffer_len, c.Name, 0, DBX_DSORT_DATA)
   block_add_item(c.db.inputbuffer[:], &buffer_len, method, 0, DBX_DSORT_DATA)
   for _, x := range args {
      block_add_item(c.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(c.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(c.db.inputbuffer[:], buffer_len, DBX_CMND_CCMETH)

   C.c_dbx_generic(pf_classmethod, unsafe.Pointer(c.db.Cinputbuffer), nil)

   res := get_result(c.db.inputbuffer)

   if (res.DataType == DBX_DTYPE_OREF) {
      c.oref, _ = strconv.Atoi(res.Data.(string))
   } else {
      c.oref = -1
   }

   return res
}


// Get a property value for an instantiated database object class
func (c *Class) GetProperty(name string) Result {

   if (c.oref == -1) {
      res := new(Result)
	  res.Data = ""
      res.ErrorMessage = "No Object"
      res.ErrorCode = 1
      res.OK = false
	  return *res
   }

   buffer_len := c.Reference()

   block_add_item(c.db.inputbuffer[:], &buffer_len, c.oref, 0, DBX_DSORT_DATA)
   block_add_item(c.db.inputbuffer[:], &buffer_len, name, 0, DBX_DSORT_DATA)
   block_add_string(c.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(c.db.inputbuffer[:], buffer_len, DBX_CMND_CGETP)

   C.c_dbx_generic(pf_getproperty, unsafe.Pointer(c.db.Cinputbuffer), nil)

   res := get_result(c.db.inputbuffer)

   return res
}


// Set a property value for an instantiated database object class
func (c *Class) SetProperty(name string, value interface{}) Result {

   if (c.oref == -1) {
      res := new(Result)
	  res.Data = ""
      res.ErrorMessage = "No Object"
      res.ErrorCode = 1
      res.OK = false
	  return *res
   }

   buffer_len := c.Reference()

   block_add_item(c.db.inputbuffer[:], &buffer_len, c.oref, 0, DBX_DSORT_DATA)
   block_add_item(c.db.inputbuffer[:], &buffer_len, name, 0, DBX_DSORT_DATA)
   block_add_item(c.db.inputbuffer[:], &buffer_len, value, 0, DBX_DSORT_DATA)
   block_add_string(c.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(c.db.inputbuffer[:], buffer_len, DBX_CMND_CSETP)

   C.c_dbx_generic(pf_setproperty, unsafe.Pointer(c.db.Cinputbuffer), nil)

   res := get_result(c.db.inputbuffer)

   return res
}


// Invoke a method for an instantiated database object class
func (c *Class) Method(method string, args ... interface{}) Result {

   if (c.oref == -1) {
      res := new(Result)
	  res.Data = ""
      res.ErrorMessage = "No Object"
      res.ErrorCode = 1
      res.OK = false
	  return *res
   }

   buffer_len := c.Reference()

   block_add_item(c.db.inputbuffer[:], &buffer_len, c.oref, 0, DBX_DSORT_DATA)
   block_add_item(c.db.inputbuffer[:], &buffer_len, method, 0, DBX_DSORT_DATA)
   for _, x := range args {
      block_add_item(c.db.inputbuffer[:], &buffer_len, x, 0, DBX_DSORT_DATA)
   }
   block_add_string(c.db.inputbuffer[:], &buffer_len, "", 0, DBX_DSORT_EOD, DBX_DTYPE_STR)
   add_head(c.db.inputbuffer[:], buffer_len, DBX_CMND_CMETH)

   C.c_dbx_generic(pf_method, unsafe.Pointer(c.db.Cinputbuffer), nil)

   res := get_result(c.db.inputbuffer)

   return res
}


func (db *Database) Benchmark(inputstr string) string {

   copy(db.inputbuffer[:], inputstr)

   C.c_dbx_generic(pf_benchmark, unsafe.Pointer(db.Cinputbuffer), nil)

   res := string(db.inputbuffer[:])

   return res
}


// This is called when this module is loaded
func init()  {
	return
} 


// Return the version of this module
func Version() string {
   str := fmt.Sprintf("mg_go:%d.%d.%d", DBX_VERSION_MAJOR, DBX_VERSION_MINOR, DBX_VERSION_BUILD)
   return string(str)
}


// Sleep for the specified number of milliseconds
func Sleep(period_ms int) int {
   C.c_dbx_sleep(pf_sleep,  C.int(period_ms))
   res := 0

   return res
}


func block_add_item(buffer []byte, buffer_len *int, item interface{}, string_len int, data_sort byte) int {
   switch item.(type) {
      case string:
         return block_add_string(buffer, buffer_len, item.(string), string_len, data_sort, DBX_DTYPE_STR)
         break;
      case int:
         return block_add_string(buffer, buffer_len, strconv.Itoa(item.(int)), string_len, data_sort, DBX_DTYPE_STR)
         break;
      case bool:
         return block_add_string(buffer, buffer_len, strconv.FormatBool(item.(bool)), string_len, data_sort, DBX_DTYPE_STR)
         break;
      case float32:
         return block_add_string(buffer, buffer_len, strconv.FormatFloat(item.(float64), 'f', -1, 64), string_len, data_sort, DBX_DTYPE_STR)
         break;
      case float64:
         return block_add_string(buffer, buffer_len, strconv.FormatFloat(item.(float64), 'f', -1, 64), string_len, data_sort, DBX_DTYPE_STR)
         break;
      default:
         return block_add_string(buffer, buffer_len, item.(string), string_len, data_sort, DBX_DTYPE_STR)
         break;
   }
   return 0
}


func block_add_string(buffer []byte, buffer_len *int, item string, string_len int, data_sort byte, data_type byte) int {
   if (string_len == 0) {
      string_len = len(item)
   }
   block_add_size(buffer, buffer_len, string_len, data_sort, data_type)
   copy(buffer[*buffer_len:], item)
   *buffer_len += string_len
   return 0
}


func block_add_size(buffer []byte, buffer_len *int, data_len int, data_sort byte, data_type byte) int {
   buffer[*buffer_len + 0] = (byte) (data_len >> 0)
   buffer[*buffer_len + 1] = (byte) (data_len >> 8)
   buffer[*buffer_len + 2] = (byte) (data_len >> 16)
   buffer[*buffer_len + 3] = (byte) (data_len >> 24)
   buffer[*buffer_len + 4] = ((data_sort * 20) + data_type)
   *buffer_len += 5
   return 0
}


func add_head(buffer []byte, data_len int, cmnd byte) int {
   buffer[0] = (byte) (data_len >> 0)
   buffer[1] = (byte) (data_len >> 8)
   buffer[2] = (byte) (data_len >> 16)
   buffer[3] = (byte) (data_len >> 24)
   buffer[4] = cmnd
   return 0
}


func block_get_size(buffer []byte) (int, byte, byte) {
   data_len := ((int) (buffer[0])) | (((int) (buffer[1])) << 8) | (((int) (buffer[2])) << 16) | (((int) (buffer[3])) << 24)
   data_sort := buffer[4]
   data_type := data_sort % 20
   data_sort = data_sort / 20
   return data_len, data_sort, data_type
}


func get_result(buffer []byte) (Result) {

   res := new(Result)

   len, dsort, dtype := block_get_size(buffer)

   // fmt.Printf("\nget_result: len=%v sort=%v type=%v", len, dsort, dtype);

   res.DataType = dtype
   if (dsort == DBX_DSORT_ERROR) {
      res.Data = ""
      res.ErrorMessage = string(buffer[5:len + 5])
      res.ErrorCode = 1
      res.OK = false
   } else {
      res.Data = string(buffer[5:len + 5])
      res.ErrorMessage = ""
      res.ErrorCode = 0
      res.OK = true
   }
   return *res
}


func load_mg_dba(APImodule string) int {
   libname := C.CString(APImodule)

   defer C.free(unsafe.Pointer(libname)) 
   handle := C.dlopen(libname, C.RTLD_LAZY) 

   pf_init = C.dlsym(handle, C.CString("dbx_init"))
   pf_version = C.dlsym(handle, C.CString("dbx_version"))
   pf_open = C.dlsym(handle, C.CString("dbx_open"))
   pf_close = C.dlsym(handle, C.CString("dbx_close"))
   pf_set = C.dlsym(handle, C.CString("dbx_set"))
   pf_get = C.dlsym(handle, C.CString("dbx_get"))
   pf_next = C.dlsym(handle, C.CString("dbx_next"))
   pf_previous = C.dlsym(handle, C.CString("dbx_previous"))
   pf_nextnode = C.dlsym(handle, C.CString("dbx_nextnode"))
   pf_delete = C.dlsym(handle, C.CString("dbx_delete"))
   pf_defined = C.dlsym(handle, C.CString("dbx_defined"))
   pf_merge = C.dlsym(handle, C.CString("dbx_merge"))
   pf_increment = C.dlsym(handle, C.CString("dbx_increment"))
   pf_lock = C.dlsym(handle, C.CString("dbx_lock"))
   pf_unlock = C.dlsym(handle, C.CString("dbx_unlock"))
   pf_function = C.dlsym(handle, C.CString("dbx_function"))
   pf_classmethod = C.dlsym(handle, C.CString("dbx_classmethod"))
   pf_method = C.dlsym(handle, C.CString("dbx_method"))
   pf_getproperty = C.dlsym(handle, C.CString("dbx_getproperty"))
   pf_setproperty = C.dlsym(handle, C.CString("dbx_setproperty"))
   pf_closeinstance = C.dlsym(handle, C.CString("dbx_closeinstance"))
   pf_getnamespace = C.dlsym(handle, C.CString("dbx_getnamespace"))
   pf_setnamespace = C.dlsym(handle, C.CString("dbx_setnamespace"))
   pf_sleep = C.dlsym(handle, C.CString("dbx_sleep"))
   pf_benchmark = C.dlsym(handle, C.CString("dbx_benchmark"))

   C.c_dbx_init(pf_init)

   return 0;
}
